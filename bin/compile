#!/usr/bin/env bash

# Indents output to align to heroku established conventions.
#   See: https://devcenter.heroku.com/articles/buildpack-api#bin-compile-example
indent() {
    sed -u 's/^/      /'
}

# Reads a json key out of a json file, e.g. package.json. Essentially cribbed from
# heroku's nodejs buildpack.
read_json_key() {
  local file="${1}"
  local key="${2}"

  if [ -f "${file}" ] ; then
    # -c = print on only one line
    # -M = strip any color
    # --raw-output = if the filter’s result is a string then it will be written directly
    #                to stdout rather than being formatted as a JSON string with quotes
    cat "${file}" | jq -c -M --raw-output "${key}"' // ""' || return 1
  else
    echo ""
  fi
}

banner() {
  sed -u 's/^/------> /'
}

# Indents output to align to heroku established conventions.
#   See: https://devcenter.heroku.com/articles/buildpack-api#bin-compile-example
indent() {
  sed -u 's/^/       /'
}

# Shamelessy taken from heroku's nodejs buildpack.
read_json_key() {
  local file="${1}"
  local key="${2}"

  if [ -f "${file}" ] ; then
    # -c = print on only one line
    # -M = strip any color
    # --raw-output = if the filter’s result is a string then it will be written directly
    #                to stdout rather than being formatted as a JSON string with quotes
    cat "${file}" | jq -c -M --raw-output "${key}"' // ""' || return 1
  else
    echo ""
  fi
}

BUILD_DIR="${1}"
CACHE_DIR="${2}"
ENV_DIR="${3}"

NX_FILE="${BUILD_DIR}/nx.json"
if [ ! -f "${NX_FILE}" ] ; then
    # TODO(ryanouellette): @errors Should probably have a differently formatted error message.
    echo "NX Workspace file does not exist: ${NX_FILE}. Aborting" | indent
    exit 1
fi

APP_NX_PROJECT="$(cat "${ENV_DIR}/APP_NX_PROJECT")"
if [ -z "${APP_NX_PROJECT}" ] ; then
    # TODO(ryanouellette): @errors Should probably have a differently formatted error message.
    echo "APP_NX_PROJECT must be defined in the application environment and non-empty. Aborting" | indent
    exit 1
fi

echo "Installing nx" | banner
npm ci -D nx |& indent

echo "Checking if project: ${APP_NX_PROJECT} is affected by changeset." | banner

AFFECTED="$(
  npm nx affected:is_affected --base=main --head=HEAD --exclude='!'"${APP_NX_PROJECT}"',*'
  | grep "> nx run ${APP_NX_PROJECT}:is_affected"
)"

if [ -n "${AFFECTED}" ] ; then
    echo "Affected" | indent
    exit 0
else
    echo "Unaffected" | indent
    exit 1
fi
